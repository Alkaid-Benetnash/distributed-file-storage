syntax="proto3";
package center;

option java_package = "cn.edu.ustc.center";
option java_outer_classname = "ApiProtos";
import "dfs_bc.proto";
enum Type{
	FILE_DOWNLOAD = 0;
		// Request with the hash of file(payload[0]) and download location(path of local filesystem)(payload[1])
		// Response, OK means download complete, ERROR means error message(string) in payload
	INDEX_DOWNLOAD = 1;
		// Resuest with the hash of index
		// Response, OK means index content stored in payload, ERROR is same as above
	FILE_UPLOAD = 2;
		// Request with the path of the file to upload
		// Response, OK means upload complete, FAST_FORWARD means don't need upload, file hash in payload[0]. ERROR is same as above
	INDEX_UPLOAD = 3;
		// Request with the hash of an index(payload[0]) and its content(in two repeated bytes)(payload[1])
		// Response, same as above
	EXIT = 4;
		// Tell Java to Terminate
}
enum Result{
	OK = 0;
	FAST_FORWARD = 1; // Already have the same hash
	ERROR = 2;        // error message in payload
}
message FS_Request{
	Type type = 1;
	repeated bytes payload = 2;
}

message FS_Response{
	Type type = 1;
	Result result = 2;
	repeated bytes payload = 3;
}

message request_inquiry{
	int32 height = 1;
	bytes current_block_hash = 2;
}

message response_inquiry{
	enum ResType {
		SEND = 0;
		FORK = 1;
		CONFUSE = 2;
	}
	string id = 1;
	ResType result = 2;
	repeated bytes hashes = 3;
}

message request_syn{
	string id = 1;
	repeated bytes hashes = 2;
}

message response_syn{
	bytes hash = 1;
	Block block = 2;
}

message request_push{
	Block block = 1;
}

message response_push{
	enum ResType{
		CONFIRM = 0;
		NOTHING = 1;
		NEEDSYN = 2;
	}
	string id = 1;
	ResType result = 2;
}

/*
说明：
receive_request_inquiry是第一种需要广播的模型
	调用过程是 发起请求的python端构造request_inquiry, 调用JavaForward的reques_inquiry_forward, java传给对面的java之后，java调用BlockChain的receive_request_inquiry, python会返回一个respond_inquiry，其中id是无效的，java接收到之后要补上id，回复给请求端的java。再之后，请求端的java要把广播得到的回复放到一个队列里，通过stream response的方式返回给python.
receive_request_syn是第二种指定连接对象的模型
	调用过程是 发起请求的python端构造request_syn, 调用JavaForward的request_syn_forward, java根据request的id域指示连接指定的java, 对面的java再调用BlockChain的receive_request_syn, 返回一个stream的response_syn, 最后java负责传递stream的response到请求端的python.
*/
service BlockChain{
	rpc receive_request_inquiry(request_inquiry) returns (response_inquiry){}
	rpc receive_request_syn(request_syn) returns (stream response_syn){} // response from python only contains forking and hashes, id is nonsense
	rpc receive_request_push(request_push) returns (response_push) {}
}

service JavaForward{
	rpc request_inquiry_forward(request_inquiry) returns (stream response_inquiry) {} // stream by java, need to complete id
	rpc request_syn_forward(request_syn) returns (stream response_syn){} // stream by python, forward by java
	rpc request_push_forward(request_push) returns (stream response_push){} // same as request_inquiry_forward
}

service FSService{
	rpc FSServe(FS_Request) returns (FS_Response) {}
}
